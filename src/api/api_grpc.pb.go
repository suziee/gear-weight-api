// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GearStorage_GetGear_FullMethodName        = "/api.GearStorage/GetGear"
	GearStorage_GetTotalWeight_FullMethodName = "/api.GearStorage/GetTotalWeight"
)

// GearStorageClient is the client API for GearStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GearStorageClient interface {
	GetGear(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GearRequest, GearResponse], error)
	GetTotalWeight(ctx context.Context, in *WeightRequest, opts ...grpc.CallOption) (*WeightResponse, error)
}

type gearStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewGearStorageClient(cc grpc.ClientConnInterface) GearStorageClient {
	return &gearStorageClient{cc}
}

func (c *gearStorageClient) GetGear(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GearRequest, GearResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GearStorage_ServiceDesc.Streams[0], GearStorage_GetGear_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GearRequest, GearResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GearStorage_GetGearClient = grpc.BidiStreamingClient[GearRequest, GearResponse]

func (c *gearStorageClient) GetTotalWeight(ctx context.Context, in *WeightRequest, opts ...grpc.CallOption) (*WeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeightResponse)
	err := c.cc.Invoke(ctx, GearStorage_GetTotalWeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GearStorageServer is the server API for GearStorage service.
// All implementations must embed UnimplementedGearStorageServer
// for forward compatibility.
type GearStorageServer interface {
	GetGear(grpc.BidiStreamingServer[GearRequest, GearResponse]) error
	GetTotalWeight(context.Context, *WeightRequest) (*WeightResponse, error)
	mustEmbedUnimplementedGearStorageServer()
}

// UnimplementedGearStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGearStorageServer struct{}

func (UnimplementedGearStorageServer) GetGear(grpc.BidiStreamingServer[GearRequest, GearResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetGear not implemented")
}
func (UnimplementedGearStorageServer) GetTotalWeight(context.Context, *WeightRequest) (*WeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalWeight not implemented")
}
func (UnimplementedGearStorageServer) mustEmbedUnimplementedGearStorageServer() {}
func (UnimplementedGearStorageServer) testEmbeddedByValue()                     {}

// UnsafeGearStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GearStorageServer will
// result in compilation errors.
type UnsafeGearStorageServer interface {
	mustEmbedUnimplementedGearStorageServer()
}

func RegisterGearStorageServer(s grpc.ServiceRegistrar, srv GearStorageServer) {
	// If the following call pancis, it indicates UnimplementedGearStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GearStorage_ServiceDesc, srv)
}

func _GearStorage_GetGear_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GearStorageServer).GetGear(&grpc.GenericServerStream[GearRequest, GearResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GearStorage_GetGearServer = grpc.BidiStreamingServer[GearRequest, GearResponse]

func _GearStorage_GetTotalWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GearStorageServer).GetTotalWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GearStorage_GetTotalWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GearStorageServer).GetTotalWeight(ctx, req.(*WeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GearStorage_ServiceDesc is the grpc.ServiceDesc for GearStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GearStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GearStorage",
	HandlerType: (*GearStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalWeight",
			Handler:    _GearStorage_GetTotalWeight_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGear",
			Handler:       _GearStorage_GetGear_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
